# NOTE: update this with your service name
service: lambda-labs-optimization

# Create an optimized package for our functions
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin
  - serverless-provisioned-concurrency-autoscaling

custom:
  serverless-offline:
    # host: 0.0.0.0
    httpPort: 4000
  bundle:
    tsConfig: "tsconfig.eslint.json"
    linting: false

provider:
  name: aws
  runtime: nodejs14.x
  lambdaHashingVersion: 20201221
  vpc:
    securityGroupIds:
      - sg-5a083a33
    subnetIds:
      - subnet-267ab46b
      - subnet-fe780b97
      - subnet-a770c9dc
  memorySize: 512
  timeout: 30 #API Gateway timeout
  role: arn:aws:iam::999110959427:role/lambda-labs-role

  environment:
    REGION: ${env:REGION}

  tracing:
    apiGateway: true
    lambda: true

functions:
  createOrUpdateUserV1:
    handler: src/userHandlerV1.createOrUpdateUser
    events:
      - http:
          path: v1/users
          method: post
  createOrUpdateUserV2:
    handler: src/userHandlerV2.createOrUpdateUser
    events:
      - http:
          path: v2/users
          method: post
  createOrUpdateUserV3:
    handler: src/userHandlerV3.createOrUpdateUser
    provisionedConcurrency: 1
    concurrencyAutoscaling: true #all settings: https://www.serverless.com/plugins/serverless-provisioned-concurrency-autoscaling
#    concurrencyAutoscaling:
#      enabled: true
#        maximum: 10
#        minimum: 1
#        usage: 0.75
#        scaleInCooldown: 120
#        scaleOutCooldown: 0
#        customMetric:
#          statistic: maximum
    events:
      - http:
          path: v3/users
          method: post
